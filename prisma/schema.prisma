// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  EMPLOYEE
}

model User {
  id                       String                 @id @default(cuid())
  firstName                String?
  lastName                 String?
  email                    String                 @unique
  profileImage             String?
  passwordHash             String
  role                     Role                   @default(EMPLOYEE)
  pointsBalance            Int                    @default(0)
  monthlyBudget            Int                    @default(50)
  emailVerified            DateTime?
  birthday                 DateTime?
  workAnniversary          DateTime?
  preferredName            String?
  department               String?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  sessions                 Session[]
  sentRecognitions         Recognition[]          @relation("SenderRecognitions")
  receivedRecognitionLinks RecognitionRecipient[] @relation("UserRecognitionRecipients")
  submittedNominations     Nomination[]           @relation("SubmittedNominations")
  nominationsAsNominee     Nomination[]           @relation("NomineeUser")
  redemptions              Redemption[]           @relation("UserRedemptions")
  isActive                 Boolean                @default(true)
  sentComments             RecognitionComment[]   @relation("CommentSender")
  receivedComments         RecognitionComment[]   @relation("CommentRecipient")
  passwordResetTokens      PasswordResetToken[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  expires      DateTime
}

model UserInvite {
  id              String    @id @default(cuid())
  email           String    @unique
  role            Role      @default(EMPLOYEE)
  createdById     String
  createdAt       DateTime  @default(now())
  consumedAt      DateTime?
  // new optional fields
  firstName       String?
  lastName        String?
  preferredName   String?
  birthday        DateTime?
  workAnniversary DateTime?
  department      String?
  sendEmail       Boolean   @default(true)
}

model Recognition {
  id        String   @id @default(cuid())
  senderId  String
  sender    User     @relation("SenderRecognitions", fields: [senderId], references: [id], onDelete: Cascade)
  message   String
  createdAt DateTime @default(now())

  recipients RecognitionRecipient[]
  comments   RecognitionComment[]   @relation("RecognitionComments")
}

model RecognitionRecipient {
  id            String      @id @default(cuid())
  recognitionId String
  recognition   Recognition @relation(fields: [recognitionId], references: [id], onDelete: Cascade)
  recipientId   String
  recipient     User        @relation("UserRecognitionRecipients", fields: [recipientId], references: [id], onDelete: Cascade)
  points        Int

  createdAt DateTime @default(now())
}

enum NominationType {
  EOM // Employee of the Month
  LINKEDIN
}

enum NominationStatus {
  PENDING
  APPROVED
  REJECTED
  WON
  SKIPPED
}

model NominationChallenge {
  id            String   @id @default(cuid())
  title         String   @unique
  description   String?
  qualification String? // free text about how to qualify
  isActive      Boolean  @default(true)
  startDate     DateTime
  endDate       DateTime
  points        Int      @default(0)
  // Optional JSON field for flexible requirements (e.g. upload screenshot, URL, notes)
  requirements  Json?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  nominations Nomination[]
}

model Nomination {
  id          String @id @default(cuid())
  submitterId String
  submitter   User   @relation("SubmittedNominations", fields: [submitterId], references: [id], onDelete: Cascade)

  challengeId String
  challenge   NominationChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  nomineeId String?
  nominee   User?   @relation("NomineeUser", fields: [nomineeId], references: [id], onDelete: SetNull)

  reason     String?
  screenshot String?

  status    NominationStatus @default(PENDING)
  monthKey  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([submitterId, challengeId, monthKey], map: "uniq_submitter_challenge_month")
}

enum RewardType {
  AMAZON
  VISA
}

enum RedemptionStatus {
  PENDING // created, awaiting provider or admin
  APPROVED // approved to fulfill (optional step)
  FULFILLED // provider returned a code / delivered
  FAILED
  CANCELED
}

model RewardCategory {
  id        String          @id @default(cuid())
  name      String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  rewards   RewardCatalog[]
}

model RewardCatalog {
  id          String         @id @default(cuid())
  categoryId  String
  category    RewardCategory @relation(fields: [categoryId], references: [id])
  type        RewardType
  label       String         @unique
  valueCents  Int
  pointsCost  Int
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  redemptions Redemption[]   @relation("CatalogRedemptions")

  @@index([categoryId, isActive])
  @@index([type, isActive])
}

model Redemption {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserRedemptions", fields: [userId], references: [id], onDelete: Cascade)

  catalogId String?
  catalog   RewardCatalog? @relation("CatalogRedemptions", fields: [catalogId], references: [id], onDelete: Restrict)

  type        RewardType
  pointsSpent Int
  valueCents  Int
  status      RedemptionStatus @default(PENDING)

  provider     String? // e.g. "mock", "tremendous", "tango"
  externalId   String? // provider reference
  code         String? // eGift code (if fulfilled)
  claimUrl     String? // optional claim link
  deliverEmail String? // where it was sent (default user email)
  note         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional: idempotency if you add a client-generated key
  idemKey String? @unique
}

model RecognitionComment {
  id            String      @id @default(cuid())
  recognitionId String
  recognition   Recognition @relation("RecognitionComments", fields: [recognitionId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation("CommentSender", fields: [senderId], references: [id], onDelete: Cascade)

  recipientId String?
  recipient   User?   @relation("CommentRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  message       String?
  pointsBoosted Int     @default(0)

  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}
